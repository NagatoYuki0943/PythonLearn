"""
可变类型（mutable），创建后可以继续修改对象的内容（值）
    字典，列表

复杂可变类型:[[1, 2], [3, 4]]

复杂可变类型
    浅拷贝: 只拷贝顶层数据,里面的数据不拷贝(地址相同)
    深拷贝: 底层数据和底层数据都拷贝

"""

import copy


def eq():
    """
    直接赋值地址完全相同,修改会相互影响
    """

    A = [1, 2]
    B = [3, 4]

    C = [A, B]
    D = C
    print("C =", C, id(C))
    print("D =", D, id(D))
    # C = [[1, 2], [3, 4]] 2604182302152
    # D = [[1, 2], [3, 4]] 2604182302152

    D[0].append(0)
    print("C =", C, id(C))
    print("D =", D, id(D))
    # C = [[1, 2, 0], [3, 4]] 2604182302152
    # D = [[1, 2, 0], [3, 4]] 2604182302152

    print("*" * 50)


eq()


def shallow():
    """
    复杂可变类型浅拷贝只拷贝顶层数据,里面的数据不拷贝(地址相同)
    """

    A = [1, 2]
    B = [3, 4]

    C = [A, B]

    print("A =", A, id(A))
    print("C =", C, id(C))
    print("C[0] =", C[0], id(C[0]))
    # A =    [1, 2] 2381356821896
    # C = [[1, 2], [3, 4]] 2381356821960
    # C[0] = [1, 2] 2381356821896

    print("*" * 50)

    D = copy.copy(C)
    print("D =", D, id(D))
    print("D[0] =", D[0], id(D[0]))
    # D = [[1, 2], [3, 4]] 2381356845384   D和C的地址不同
    # D[0] = [1, 2] 2381356821896

    print("*" * 50)

    # 底层数据共享内存
    A.append(8)
    D[0].append(9)
    print("A =", A, id(A))
    print("D[0] =", D[0], id(D[0]))
    # A =    [1, 2, 8, 9] 2381356821896     底层数据共享内存
    # D[0] = [1, 2, 8, 9] 2381356821896

    print("*" * 50)


# shallow()


def deep():
    """
    复杂可变类型深拷贝底层数据和底层数据都拷贝
    """

    A = [1, 2]
    B = [3, 4]

    C = [A, B]

    D = copy.deepcopy(C)
    print("D =", D, id(D))
    print("A =", A, id(A))
    print("D[0] =", D[0], id(D[0]))
    # D = [[1, 2], [3, 4]] 2135454820296
    # A =    [1, 2] 2135454870984       A,D[0] 地址不相同,数据不影响
    # D[0] = [1, 2] 2135454871176

    print("*" * 50)

    A.append(8)
    D[0].append(9)
    print("A =", A, id(A))
    print("D[0] =", D[0], id(D[0]))
    # A =    [1, 2, 8] 2135454870984    地址不相同,数据不影响
    # D[0] = [1, 2, 9] 2135454871176


# deep()
