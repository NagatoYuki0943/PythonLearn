"""
不可变类型（immutabel） ，一旦创建就不可修改的对象（值）
    不可变类型: 数字,字符串,元组

复杂不可变类型: ((), (), ()) ([], [], [])

复杂不可变类型拷贝:
    浅拷贝,直接引用,和 = 赋值相同
    深拷贝,看数据具体是可变还是不可变的.如果数据是可变的,会产生新的空间,保持数据的独立性

"""

import copy


def shallow():
    """
    浅拷贝,直接引用,和 = 赋值相同
    """
    a = [1, 2]
    b = [3, 4]
    c = (a, b)

    d = c

    print("c=", c, id(c))
    print("d=", d, id(d))
    # c= ([1, 2], [3, 4]) 2445094076616
    # d= ([1, 2], [3, 4]) 2445094076616

    e = copy.copy(c)
    e[0].append(5)
    print("c=", c, id(c))
    print("e=", e, id(e))
    # c= ([1, 2, 5], [3, 4]) 2445094076616
    # e= ([1, 2, 5], [3, 4]) 2445094076616

    print("a =", a, id(a))
    print("c[0] =", c[0], id(c[0]))
    print("e[0] =", e[0], id(e[0]))
    # a = [1, 2, 5] 2445094120840
    # c[0] = [1, 2, 5] 2445094120840
    # e[0] = [1, 2, 5] 2445094120840


# shallow()


def deep():
    """
    深拷贝,看数据具体是可变还是不可变的.如果数据是可变的,会产生新的空间,保持数据的独立性
    """
    a = [1, 2]
    b = [3, 4]
    c = (a, b)

    d = copy.deepcopy(c)
    print("c=", c, id(c))
    print("d=", d, id(d))
    # c= ([1, 2], [3, 4]) 3105036200200
    # d= ([1, 2], [3, 4]) 3105036200776

    print("a =", a, id(a))
    print("c[0] =", c[0], id(c[0]))
    print("d[0] =", d[0], id(d[0]))
    # a =    [1, 2] 3105036201416   a和c[0] 相同,因为是直接使用的
    # c[0] = [1, 2] 3105036201416
    # d[0] = [1, 2] 3105036150728   c和d不同,是因为深拷贝

    d[0][0] = 10
    print("a =", a, id(a))
    print("c[0] =", c[0], id(c[0]))
    print("d[0] =", d[0], id(d[0]))
    # a =    [1, 2] 3105036201416   a和c[0] 相同,因为是直接使用的
    # c[0] = [1, 2] 3105036201416
    # d[0] = [10, 2] 3105036150728  c和d不同,是因为深拷贝


deep()
