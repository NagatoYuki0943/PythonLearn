
x = [1, 2, 3]

x.extend(x[-1] * 2 for _ in range(3))

print(x)
# [1, 2, 3, 6, 12, 24]

# 给定结果 [1, 2, 3, 6, 12, 24]，我们需要理解生成器表达式是惰性求值的，这意味着每次 for 循环迭代时都会对表达式 x[-1] * 2 求值，而不是 一切都在开始时同时发生。
# 以下是所发生事件的逐步过程：
# 当初始列表x被定义为[1,2,3]后，调用extend()方法。
# 生成器表达式 (x[-1] * 2 for _ in range(3)) 开始执行。
# 对于生成器表达式的第一次迭代，x[-1] 是 3（该点列表的最后一个元素），因此 3 * 2 给出 6。列表 x 现在是 [1, 2, 3, 6]。
# 对于第二次迭代，x[-1] 现在是 6（更新后的列表的最后一个元素），因此 6 * 2 给出 12。列表 x 现在是 [1, 2, 3, 6, 12]。
# 对于第三次也是最后一次迭代，x[-1] 是 12，因此 12 * 2 给出 24。列表 x 最终是 [1, 2, 3, 6, 12, 24]。
# 理解这种行为的关键是要认识到生成器表达式是惰性求值的，并且列表 x 在循环的每次迭代之后都会被修改。 当新元素添加到列表中时，x[-1] 的值会发生变化，这反过来会影响后续迭代中生成器表达式的结果。
# 因此，每次迭代时，生成器表达式都会使用列表中当前的最后一个元素作为计算的基础，最终的列表为 [1, 2, 3, 6, 12, 24]。
